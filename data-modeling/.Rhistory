#Worked with Brian Wei
#1
#2
n=100
set.seed(112)
X = rep(NA,n)
init_phi=0.8
initial=rnorm(1,0,1)
X[1] = initial
for(i in 2:n)
{
X[i]=init_phi*X[i-1]+rnorm(1,0,1)
}
#calculating phis
gen_phi<-function (n,Yts,tau) {
phi_k<-rep(NA,n)
phi_k[1]=0
for (t in 2:n) {
phi_star=rnorm(1,mean = phi_k[t-1],sd=tau)
if (phi_star>=1 | phi_star<=-1) {
phi_k[t]=phi_k[t-1]
}
else {
mincomp=gen_likelihood(length(Yts),Yts,phi_star)/gen_likelihood(length(Yts),Yts,phi_k[t-1])
a=min(1,mincomp) #probability a
if (runif(1)<=a) {
phi_k[t]=phi_star
}
else {
phi_k[t]=phi_k[t-1]
}
}
}
return(phi_k)
}
#gen_phi(n,Yts,tau)
phiK=gen_phi(1001,ARts,0.8)
ts.plot(phiK, main="Phi_k Times Series")
acf(phiK)
# 3.
# tau=0.2
phiK2=gen_phi(1001,ARts,0.2)
ts.plot(phiK2, main="Phi_k2 Times Series")
acf(phiK2)
# tau=0.01
phiK3=gen_phi(1001,ARts,0.01)
ts.plot(phiK3, main="Phi_k3 Times Series")
acf(phiK3)
#Worked with Brian Wei
#1
#2
n=100
set.seed(112)
X = rep(NA,n)
init_phi=0.8
initial=rnorm(1,0,1)
X[1] = initial
for(i in 2:n)
{
X[i]=init_phi*X[i-1]+rnorm(1,0,1)
}
#calculating phis
gen_likelihood<-function(n,Y,phi){
condlikelihood<-rep(NA,n)
condlikelihood[1]=(1/sqrt(2*pi))*exp(-0.5*(Y[1])^2/1)
for (t in 2:n) {
condlikelihood[t]=(1/sqrt(2*pi))*exp(-0/5*(Y[t]-phi))
}
likelihood=prod(condlikelihood)
return(likelihood)
}
gen_phi<-function (n,Yts,tau) {
phi_k<-rep(NA,n)
phi_k[1]=0
for (t in 2:n) {
phi_star=rnorm(1,mean = phi_k[t-1],sd=tau)
if (phi_star>=1 | phi_star<=-1) {
phi_k[t]=phi_k[t-1]
}
else {
mincomp=gen_likelihood(length(Yts),Yts,phi_star)/gen_likelihood(length(Yts),Yts,phi_k[t-1])
a=min(1,mincomp) #probability a
if (runif(1)<=a) {
phi_k[t]=phi_star
}
else {
phi_k[t]=phi_k[t-1]
}
}
}
return(phi_k)
}
#gen_phi(n,Yts,tau)
phiK=gen_phi(1001,ARts,0.8)
ts.plot(phiK, main="Phi_k Times Series")
acf(phiK)
# 3.
# tau=0.2
phiK2=gen_phi(1001,ARts,0.2)
ts.plot(phiK2, main="Phi_k2 Times Series")
acf(phiK2)
# tau=0.01
phiK3=gen_phi(1001,ARts,0.01)
ts.plot(phiK3, main="Phi_k3 Times Series")
acf(phiK3)
#Worked with Brian Wei
#1
#2
n=100
set.seed(112)
X = rep(NA,n)
init_phi=0.8
initial=rnorm(1,0,1)
X[1] = initial
for(i in 2:n)
{
X[i]=init_phi*X[i-1]+rnorm(1,0,1)
}
#calculating phis
gen_likelihood<-function(n,Y,phi){
condlikelihood<-rep(NA,n)
condlikelihood[1]=(1/sqrt(2*pi))*exp(-0.5*(Y[1])^2/1)
for (t in 2:n) {
condlikelihood[t]=(1/sqrt(2*pi))*exp(-0/5*(Y[t]-phi))
}
likelihood=prod(condlikelihood)
return(likelihood)
}
gen_phi<-function (n,Yts,tau) {
phi_k<-rep(NA,n)
phi_k[1]=0
for (t in 2:n) {
phi_star=rnorm(1,mean = phi_k[t-1],sd=tau)
if (phi_star>=1 | phi_star<=-1) {
phi_k[t]=phi_k[t-1]
}
else {
mincomp=gen_likelihood(length(Yts),Yts,phi_star)/gen_likelihood(length(Yts),Yts,phi_k[t-1])
a=min(1,mincomp) #probability a
if (runif(1)<=a) {
phi_k[t]=phi_star
}
else {
phi_k[t]=phi_k[t-1]
}
}
}
return(phi_k)
}
#gen_phi(n,Yts,tau)
phiK=gen_phi(1001,X,0.8)
ts.plot(phiK, main="Phi_k Times Series")
acf(phiK)
# 3.
# tau=0.2
phiK2=gen_phi(1001,X,0.2)
ts.plot(phiK2, main="Phi_k2 Times Series")
acf(phiK2)
# tau=0.01
phiK3=gen_phi(1001,X,0.01)
ts.plot(phiK3, main="Phi_k3 Times Series")
acf(phiK3)
#gen_phi(n,Yts,tau)
ts.plot(phiK, main="Phi_k Times Series")
phiK=gen_phi(1001,X,0.8)
acf(phiK)
#gen_phi(n,Yts,tau)
phiK=gen_phi(1001,X,0.8)
ts.plot(phiK, main="Tau=1")
acf(phiK)
#gen_phi(n,Yts,tau)
phiK=gen_phi(1001,X,0.8)
ts.plot(phiK, main="Tau=1")
acf(phiK)
#gen_phi(n,Yts,tau)
phiK=gen_phi(1001,X,0.8)
ts.plot(phiK, main= "Tau=1")
acf(phiK)
#gen_phi(n,Yts,tau)
phiK=gen_phi(1001,X,0.8)
ts.plot(phiK, main= "Tau=1")
acf(phiK, main= "ACF Tau=1")
ts.plot(phiK, main= "Tau=1")
# tau=0.2
phiK2=gen_phi(1001,X,0.2)
ts.plot(phiK2, main="Tau=0.2")
acf(phiK2,"ACF Tau=0.2")
phiK2=gen_phi(1001,X,0.2)
ts.plot(phiK2, main="Tau=0.2")
acf(phiK2,main = "ACF Tau=0.2")
# tau=0.01
phiK3=gen_phi(1001,X,0.01)
ts.plot(phiK3, main="Tau=0.01")
acf(phiK3, main = "acf tau 0.01")
install.packages("mvtnorm")
library(mvtnorm)
Xk<-rep(NA,1000)
Yk<-rep(NA,1000)
s1=matrix(c(1,1,1,2),nrow=2,ncol = 2)
for (i in 1:1000) {
test1=rmvnorm(1, mean = c(1,2), sigma = s1)
care=rmvnorm(1, mean = c(1,2), sigma = s1)
Xk[i]=care[1]
Yk[i]=care[2]
}
ts.plot(Xk)
ts.plot(Yk)
Xk<-rep(NA,1000)
Yk<-rep(NA,1000)
s1=matrix(c(1,1,1,2),nrow=2,ncol = 2)
test1=rmvnorm(1, mean = c(1,2), sigma = s1)
for (i in 1:1000) {
care=rmvnorm(1, mean = c(1,2), sigma = s1)
Xk[i]=care[1]
Yk[i]=care[2]
}
ts.plot(Xk)
ts.plot(Xk, main= "Xk")
ts.plot(Yk, main = "Yk")
ts.plot(Xk, main= "zk wk samples")
ts.plot(Yk, main = "xk yk samples")
#part 2 of exercise 1
a=1000
Yk<-rep(NA,a)
Xk<-rep(NA,a)
Xk[1]=0
Yk[1]=0
for(i in 2:1000)
{
Xk[i] = rnorm(1,Yk[i-1],0.5)
Yk[i] = rnorm(1, Xk[i]+1, 1)
}
ts.plot(Xk)
ts.plot(Yk)
ts.plot(Xk)
ts.plot(Yk)
ts.plot(Xk)
a=1000
Xk<-rep(NA,a)
Yk<-rep(NA,a)
Xk[1]=0
Yk[1]=0
for(i in 2:1000)
{
Xk[i] = rnorm(1,Yk[i-1],0.5)
Yk[i] = rnorm(1, Xk[i]+1, 1)
}
#part 2 of exercise 1
a=1000
Xk<-rep(NA,a)
Yk<-rep(NA,a)
Xk[1]=0
Yk[1]=0
for(i in 2:1000)
{
Xk[i] = rnorm(1,Yk[i-1],0.5)
Yk[i] = rnorm(1, Xk[i]+1, 1)
}
ts.plot(Xk)
ts.plot(Yk)
ts.plot(Xk)
ts.plot(Yk)
View(gen_likelihood)
#part 2 of exercise 1
a=1000
Xk<-rep(NA,a)
Yk<-rep(NA,a)
Xk[1]=0
Yk[1]=0
for(i in 2:1000)
{
a= rnorm(1,Yk[i-1],0.5)
print(a)
Xk[i] = a
Yk[i] = rnorm(1, Xk[i]+1, 1)
}
ts.plot(Xk)
ts.plot(Yk)
# Worked with Brian Wei
install.packages("astsa")
library(astsa)
install.packages("mvtnorm")
library(mvtnorm)
install.packages("dlm")
library("dlm")
#Exercise 9.1
#
T=100
# Details of the model
x_coefficient <- 0.95
W_std <- 0.2
V_std <- 0.5
W_var <- W_std^2
V_var <- V_std^2
X0=rnorm(1,0,1)
Xt<-rep(NA,T+1)
Xt[1]=X0
Wt<-rnorm(101,0,W_std)
Vt<-rnorm(101,0,V_std)
Yt<-rep(NA,T+1)
# Simulate the series
# X
for (i in 2:T+1) {
Xt[i]=0.95*Xt[i-1]+Wt[i]
}
# Y
for (i in 1:T+1) {
Yt[i]=Xt[i]+Vt[i]
}
Xts=as.ts(Xt)
Yts=as.ts(Yt)
ts.plot(Xts,Yts, col=c("red","black"), main = "Series X and Y")
# X
for (i in 1:T+1) {
print(i)
Xt[i]=0.95*Xt[i-1]+Wt[i]
print(Xt[i])
}
# Y
for (i in 1:T+1) {
Yt[i]=Xt[i]+Vt[i]
}
Xts=as.ts(Xt)
Yts=as.ts(Yt)
ts.plot(Xts,Yts, col=c("red","black"), main = "Series X and Y")
T=100
# Details of the model
x_coefficient <- 0.95
W_std <- 0.2
V_std <- 0.5
W_var <- W_std^2
V_var <- V_std^2
X0=rnorm(1,0,1)
Xt<-rep(NA,T+1)
Xt[1]=X0
Vt<-rnorm(101,0,V_std)
Yt<-rep(NA,T+1)
# Simulate the series
Wt<-rnorm(101,0,W_std)
# X
for (i in 1:T+1) {
print(i)
Xt[i]=0.95*Xt[i-1]+Wt[i]
}
print(Xt[i])
# Y
for (i in 1:T+1) {
Yt[i]=Xt[i]+Vt[i]
}
Xts=as.ts(Xt)
Yts=as.ts(Yt)
ts.plot(Xts,Yts, col=c("red","black"), main = "Series X and Y")
Yts=as.ts(Yt)
ts.plot(Xts,Yts, col=c("red","blue"), main = "Series X and Y")
### Kalman filter
kfilt_means <- matrix(0, ncol = 1, nrow = T+1)
# current mean
m_current <- 0
kfilt_means[1,] <- m_current
# current filtering variance
V_current <- 1
# for each t
for (t in 1:T){
# prediction step
m_next <- x_coefficient*m_current
V_next <- x_coefficient^2*V_current+W_var
# update step
K<- V_next%*%solve(V_next+V_var)
m_current<-m_next+K*(Yts[t]-m_next)
V_current<-V_next-V_next*K
kfilt_means[t+1,] <- m_current
}
# plot
lines(kfilt_means, col = "goldenrod", lwd = 3)
m_current <- 0
kfilt_means[1,] <- m_current
# current filtering variance
V_current <- 1
# for each t
for (t in 1:T){
# prediction step
m_next <- x_coefficient*m_current
V_next <- x_coefficient^2*V_current+W_var
# update step
K<- V_next%*%solve(V_next+V_var)
m_current<-m_next+K*(Yts[t]-m_next)
m_next <- x_coefficient*m_current
m_next <- x_coefficient*m_current
for (t in 1:T){
# prediction step
m_next <- x_coefficient*m_current
print m_next
print(m_next)
x_coefficient
m_current
x_coefficient*m_current
x_coefficient**m_current
m_next = x_coefficient*m_current
print(m_next)
m_next = x_coefficient*m_current
V_next <- x_coefficient^2*V_current+W_var
# update step
K<- V_next%*%solve(V_next+V_var)
m_current<-m_next+K*(Yts[t]-m_next)
V_current<-V_next-V_next*K
kfilt_means[t+1,] <- m_current
}
for (t in 1:T){
# prediction step
m_next = x_coefficient*m_current
V_next <- x_coefficient^2*V_current+W_var
# update step
K<- V_next%*%solve(V_next+V_var)
m_current<-m_next+K*(Yts[t]-m_next)
V_current<-V_next-V_next*K
kfilt_means[t+1,] <- m_current
}
# plot
lines(kfilt_means, col = "goldenrod", lwd = 3)
### Kalman filter
kfilt_means <- matrix(0, ncol = 1, nrow = T+1)
# current mean
m_current <- 0
kfilt_means[1,] <- m_current
kfilt_means[1] <- m_current
# current filtering variance
V_current <- 1
# for each t
for (t in 1:T){
# prediction step
m_next = x_coefficient*m_current
m_next = x_coefficient*m_current
# for each t
for (t in 1:T){
# prediction step
m_next = x_coefficient*m_current
V_next <- x_coefficient^2*V_current+W_var
# update step
K<- V_next%*%solve(V_next+V_var)
m_current<-m_next+K*(Yts[t]-m_next)
V_current<-V_next-V_next*K
kfilt_means[t+1,] <- m_current
}
for (t in 1:T){
# prediction step
m_next = x_coefficient*m_current
print(m_next)
V_next <- x_coefficient^2*V_current+W_var
# update step
K<- V_next%*%solve(V_next+V_var)
m_current<-m_next+K*(Yts[t]-m_next)
V_current<-V_next-V_next*K
kfilt_means[t+1,] <- m_current
}
for (t in 1:T){
# prediction step
m_next = x_coefficient*m_current
print(m_next)
V_next <- x_coefficient^2*V_current+W_var
# update step
K<- V_next%*%solve(V_next+V_var)
m_current<-m_next+K*(Yts[t]-m_next)
V_current<-V_next-V_next*K
kfilt_means[t+1,] <- m_current
}
for (t in 1:T) {
# prediction step
m_next = x_coefficient*m_current
print(m_next)
V_next <- x_coefficient^2*V_current+W_var
# update step
K<- V_next%*%solve(V_next+V_var)
m_current<-m_next+K*(Yts[t]-m_next)
V_current<-V_next-V_next*K
kfilt_means[t+1,] <- m_current
}
for (t in 1:T+1) {
# prediction step
m_next = x_coefficient*m_current
print(m_next)
V_next <- x_coefficient^2*V_current+W_var
# update step
K<- V_next%*%solve(V_next+V_var)
m_current<-m_next+K*(Yts[t]-m_next)
V_current<-V_next-V_next*K
kfilt_means[t+1,] <- m_current
}
dataset= read.csv(file="../datasets/daily_price.csv",header=FALSE,sep=",")
dataset= read.csv(file="/datasets/daily_price.csv",header=FALSE,sep=",")
setwd("~/Harvard/Junior Year/Classes/CS 109/Project ideas/project updated/airbnb-pricing-prediction/data-modeling")
dataset= read.csv(file="../datasets/daily_price.csv",header=FALSE,sep=",")
dataset
pt = as.ts(dataset)
plot(pt)
dataset= read.csv(file="../datasets/daily_price.csv",header=FALSE,sep=",")
pt = as.ts(dataset)
plot(pt)
dataset= read.csv(file="../datasets/daily_price.csv",header=True,sep=",")
pt = as.ts(dataset)
plot(pt, main= "Average Price of All Listings Over Time")
librar("TTR")
library("TTR")
pricecomponents= decompose(pt)
diff1= diff(pt, differences=1)
plot(diff1, main"Average Price with 1 Difference")
plot(diff1, main="Average Price with 1 Difference")
acf(diff1, lag.max=20)
acf(diff1, lag.max=20, main= "ACF of Average Price")
pacf(diff1, lag.max=20, main "PACF of Average Price")
pacf(diff1, lag.max=20, main= "PACF of Average Price")
library("forecast")
auto.arima(diff1)
